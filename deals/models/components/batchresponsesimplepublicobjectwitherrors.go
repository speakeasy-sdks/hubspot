// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/hubspot-go/deals/internal/utils"
	"time"
)

type BatchResponseSimplePublicObjectWithErrorsStatus string

const (
	BatchResponseSimplePublicObjectWithErrorsStatusPending    BatchResponseSimplePublicObjectWithErrorsStatus = "PENDING"
	BatchResponseSimplePublicObjectWithErrorsStatusProcessing BatchResponseSimplePublicObjectWithErrorsStatus = "PROCESSING"
	BatchResponseSimplePublicObjectWithErrorsStatusCanceled   BatchResponseSimplePublicObjectWithErrorsStatus = "CANCELED"
	BatchResponseSimplePublicObjectWithErrorsStatusComplete   BatchResponseSimplePublicObjectWithErrorsStatus = "COMPLETE"
)

func (e BatchResponseSimplePublicObjectWithErrorsStatus) ToPointer() *BatchResponseSimplePublicObjectWithErrorsStatus {
	return &e
}

func (e *BatchResponseSimplePublicObjectWithErrorsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "CANCELED":
		fallthrough
	case "COMPLETE":
		*e = BatchResponseSimplePublicObjectWithErrorsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchResponseSimplePublicObjectWithErrorsStatus: %v", v)
	}
}

type BatchResponseSimplePublicObjectWithErrors struct {
	CompletedAt time.Time                                       `json:"completedAt"`
	NumErrors   *int                                            `json:"numErrors,omitempty"`
	RequestedAt *time.Time                                      `json:"requestedAt,omitempty"`
	StartedAt   time.Time                                       `json:"startedAt"`
	Links       map[string]string                               `json:"links,omitempty"`
	Results     []SimplePublicObject                            `json:"results"`
	Errors      []StandardError                                 `json:"errors,omitempty"`
	Status      BatchResponseSimplePublicObjectWithErrorsStatus `json:"status"`
}

func (b BatchResponseSimplePublicObjectWithErrors) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BatchResponseSimplePublicObjectWithErrors) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BatchResponseSimplePublicObjectWithErrors) GetCompletedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CompletedAt
}

func (o *BatchResponseSimplePublicObjectWithErrors) GetNumErrors() *int {
	if o == nil {
		return nil
	}
	return o.NumErrors
}

func (o *BatchResponseSimplePublicObjectWithErrors) GetRequestedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *BatchResponseSimplePublicObjectWithErrors) GetStartedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartedAt
}

func (o *BatchResponseSimplePublicObjectWithErrors) GetLinks() map[string]string {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *BatchResponseSimplePublicObjectWithErrors) GetResults() []SimplePublicObject {
	if o == nil {
		return []SimplePublicObject{}
	}
	return o.Results
}

func (o *BatchResponseSimplePublicObjectWithErrors) GetErrors() []StandardError {
	if o == nil {
		return nil
	}
	return o.Errors
}

func (o *BatchResponseSimplePublicObjectWithErrors) GetStatus() BatchResponseSimplePublicObjectWithErrorsStatus {
	if o == nil {
		return BatchResponseSimplePublicObjectWithErrorsStatus("")
	}
	return o.Status
}
