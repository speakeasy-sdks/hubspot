// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/hubspot-go/deals/internal/utils"
	"time"
)

type Status string

const (
	StatusPending    Status = "PENDING"
	StatusProcessing Status = "PROCESSING"
	StatusCanceled   Status = "CANCELED"
	StatusComplete   Status = "COMPLETE"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "CANCELED":
		fallthrough
	case "COMPLETE":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type BatchResponseSimplePublicObject struct {
	CompletedAt time.Time            `json:"completedAt"`
	RequestedAt *time.Time           `json:"requestedAt,omitempty"`
	StartedAt   time.Time            `json:"startedAt"`
	Links       map[string]string    `json:"links,omitempty"`
	Results     []SimplePublicObject `json:"results"`
	Status      Status               `json:"status"`
}

func (b BatchResponseSimplePublicObject) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BatchResponseSimplePublicObject) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BatchResponseSimplePublicObject) GetCompletedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CompletedAt
}

func (o *BatchResponseSimplePublicObject) GetRequestedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *BatchResponseSimplePublicObject) GetStartedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartedAt
}

func (o *BatchResponseSimplePublicObject) GetLinks() map[string]string {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *BatchResponseSimplePublicObject) GetResults() []SimplePublicObject {
	if o == nil {
		return []SimplePublicObject{}
	}
	return o.Results
}

func (o *BatchResponseSimplePublicObject) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}
