// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package deals

import (
	"bytes"
	"context"
	"fmt"
	"github.com/speakeasy-sdks/hubspot-go/deals/internal/hooks"
	"github.com/speakeasy-sdks/hubspot-go/deals/internal/utils"
	"github.com/speakeasy-sdks/hubspot-go/deals/models/components"
	"github.com/speakeasy-sdks/hubspot-go/deals/models/operations"
	"github.com/speakeasy-sdks/hubspot-go/deals/models/sdkerrors"
	"io"
	"net/http"
	"net/url"
)

type Gdpr struct {
	sdkConfiguration sdkConfiguration
}

func newGdpr(sdkConfig sdkConfiguration) *Gdpr {
	return &Gdpr{
		sdkConfiguration: sdkConfig,
	}
}

// PostCrmV3ObjectsDealsGdprDeletePurge - GDPR DELETE
// Permanently delete a contact and all associated content to follow GDPR. Use optional property 'idProperty' set to 'email' to identify contact by email address. If email address is not found, the email address will be added to a blocklist and prevent it from being used in the future.
func (s *Gdpr) PostCrmV3ObjectsDealsGdprDeletePurge(ctx context.Context, request components.PublicGdprDeleteInput, security operations.PostCrmV3ObjectsDealsGdprDeletePurgeSecurity) (*operations.PostCrmV3ObjectsDealsGdprDeletePurgeResponse, error) {
	hookCtx := hooks.HookContext{
		Context:        ctx,
		OperationID:    "post-/crm/v3/objects/deals/gdpr-delete_purge",
		OAuth2Scopes:   []string{},
		SecuritySource: withSecurity(security),
	}

	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	opURL, err := url.JoinPath(baseURL, "/crm/v3/objects/deals/gdpr-delete")
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, false, false, "Request", "json", `request:"mediaType=application/json"`)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", opURL, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "*/*")
	req.Header.Set("User-Agent", s.sdkConfiguration.UserAgent)
	req.Header.Set("Content-Type", reqContentType)

	if err := utils.PopulateSecurity(ctx, req, withSecurity(security)); err != nil {
		return nil, err
	}

	req, err = s.sdkConfiguration.Hooks.BeforeRequest(hooks.BeforeRequestContext{HookContext: hookCtx}, req)
	if err != nil {
		return nil, err
	}

	httpRes, err := s.sdkConfiguration.Client.Do(req)
	if err != nil || httpRes == nil {
		if err != nil {
			err = fmt.Errorf("error sending request: %w", err)
		} else {
			err = fmt.Errorf("error sending request: no response")
		}

		_, err = s.sdkConfiguration.Hooks.AfterError(hooks.AfterErrorContext{HookContext: hookCtx}, nil, err)
		return nil, err
	} else if utils.MatchStatusCodes([]string{"4XX", "5XX"}, httpRes.StatusCode) {
		httpRes, err = s.sdkConfiguration.Hooks.AfterError(hooks.AfterErrorContext{HookContext: hookCtx}, httpRes, nil)
		if err != nil {
			return nil, err
		}
	} else {
		httpRes, err = s.sdkConfiguration.Hooks.AfterSuccess(hooks.AfterSuccessContext{HookContext: hookCtx}, httpRes)
		if err != nil {
			return nil, err
		}
	}

	res := &operations.PostCrmV3ObjectsDealsGdprDeletePurgeResponse{
		HTTPMeta: components.HTTPMetadata{
			Request:  req,
			Response: httpRes,
		},
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	switch {
	case httpRes.StatusCode == 204:
	case httpRes.StatusCode >= 400 && httpRes.StatusCode < 500:
		fallthrough
	case httpRes.StatusCode >= 500 && httpRes.StatusCode < 600:
		return nil, sdkerrors.NewSDKError("API error occurred", httpRes.StatusCode, string(rawBody), httpRes)
	default:
		switch {
		case utils.MatchContentType(httpRes.Header.Get("Content-Type"), `*/*`):

			res.Body = rawBody
		default:
			return nil, sdkerrors.NewSDKError(fmt.Sprintf("unknown content-type received: %s", httpRes.Header.Get("Content-Type")), httpRes.StatusCode, string(rawBody), httpRes)
		}
	}

	return res, nil
}
